
CSS基本选择器：
	分为标签选择器（元素选择器）、类选择器、ID选择器
		<标签名> 标签内容 </标签名>
	标签选择器：标签名 { }
```
	<style>
		li {
			color:blue;
		}
	</style>
```
	类选择器： 1 类名可以重复 2 .类名 { } 
		<标签名 class="类名"> 标签内容 </标签名>
```
	<style>
		.red {
				color:red;
			}
	</style>
```
	ID选择器：1 ID名不能重复(唯一)  2 #ID名 { }  
		<标签名 id="id名"> 标签内容 </标签名>
```
	<style>
		#middle {
					background-color:pink;
				}
		
		#save {
				color: green;
				font-size:50px;
			}
	</style>
```
扩展选择器：包括组合选择器，包含选择器，交集选择器，伪类选择器
	组合选择器（并集选择器）：多个选择器用英文逗号","连接, 同时生效
```
	h1,.span,#save {
						color:red;
						font-size:30px;
					}
```
	包含选择器（后代选择器）：多个选择器用空格" "连接, 对子标签生效
		用于选择后代元素（外层标签称为父标签，内层的标签称为子标签。）
```
	#header ul li a {
						color:red;
					}
```
	交集选择器：由两个选择器构成，第一个必须是标签选择器，第二个必须是类选择器或者ID选择器。
		   必须连续书写。
		   p.class { }
		   h1#id { }
```
	p.p1 {
		color:pink;
	}
```
	伪类选择器：根据标签的状态来修饰样式
```
	<style>
		/* 未单击,默认 */
		a:link{
			color: red;
		}
		/* 单击后 */
		a:visited {
			color:pink;
		}
		/* 鼠标悬浮 */
		a:hover {
			color: chocolate;
			font-size: 30px;
		}
		/* 单击未释放 */
		a:active {
			color: aqua;
		}
	</style>
```

CSS的特性： 1继承性 2层叠性和优先级
	继承性：内层继承外层，内层另行更改除外。
		   特殊情况不继承，比如边框border
		   
	层叠性和优先级:
			1 如果多个选择器定义的样式不发生冲突，则应用所有选择器定义的样式。
			2 如果多个选择器定义的样式发生冲突,则按照选择器的优先级来处理。
		优先级总原则： 越特殊的样式，优先级越高。
		选择器的优先级：ID选择器 > 类选择器 > 标签选择器(元素选择器)
		样式表的优先级：行内样式表 > 内嵌样式表 > 外部样式表
		
常用的样式属性
	字体与文本属性
		1字体属性 
			font-weight 字体加粗： bold加粗
			font-size 字体大小 
			font-family 字体类型 
			color  字体颜色,取值可以是英文单词，也可以是十六进制符号#000000 - #FFFFFF
```
	p {
		font-weight:bold;
		font-size:30px;
		font-family:华文彩云;
		color:blue;
	}
```
		font 设置字体的所有样式 (注意顺序)
```
	font:bold 30px 华文彩云;
```

		2文本属性
			line-height 设置行高
			text-align  对齐方式: left center right
			letter-spacing 字符间距 
			text-decoration 文本修饰: underline（下划线） none(没有) overline line-through
```
	<style>
		#big {
			background-color:pink;
			line-height:100px;
			text-align:center;
			letter-spacing:10px;
			text-decoration:underline;
			/* height:100px; */
		}
	</style>
```
	
	边距和填充：1 边距（margin），标签与标签的距离
			   2填充(内边距、补白、padding)，标签与内容的距离
		边距：
		单独设置边距：
			margin-top 上边距
			margin-left 左边距
			margin-bottom 下边距
			margin-right 右边距
```
	margin-top:20px;
	margin-left:30px;
	margin-right:40px;
	margin-bottom:50px;
```
		通过复合属性设置边距：
		仅设置一个值，则应用四个边距
```
		margin:20px;
```
		设置两个值，则表示上下边距、左右边距
```
		margin:30px 60px;
```
	设置三个值，则表示上边距、左右边距、下边距
```
		margin:30px 60px 90px;
```
	设置四个值，则表示上边距、右边距、下边距、左边距 (顺时针)
```
		margin:30px 60px 90px 120px;
```
	
	填充（padding）：
		单独设置填充：
			padding-top 上填充
			padding-left 左填充
			padding-bottom 下填充
			padding-right 右填充
```
	padding-top:20px;
	padding-left:30px;
	padding-right:40px;
	padding-bottom:50px;
```
		通过复合属性设置填充：
		仅设置一个值，则应用四个填充
```
		padding:20px;
```
		设置两个值，则表示上下填充、左右填充
```
		padding:30px 60px;
```
		设置三个值，则表示上填充、左右填充、下填充
```
		padding:30px 60px 90px;
```
		设置四个值，则表示上填充、右填充、下填充、左填充 (顺时针)
```
		padding:30px 60px 90px 120px;
```
		边框属性：
			1 border属性
			单独设置：
				border-style 边框样式：solid实线 dashed虚线 none无 double
				border-width 边框宽度
				border-color 边框颜色
```
	border-style:solid;
	border-width:20px;
	border-color:green;
```
			通过复合属性设置边框：
```
	border:15px solid pink;
```
		2 border-radius属性:设置边框圆角
			像素值越大，圆角越明显
			
		border-radius:参数1 ,四个角
```
	border-radius:100px;
```
		border-radius:参数1 参数2,参数1对应左上角右下角，参数2对应右上角左下角
```
	border-radius:50px 100px;
```
		border-radius:参数1 参数2 参数3,参数1对应左上角，参数2对应右上角左下角,参数3右下角
```
	border-radius:50px 100px 150px;
```
	border-radius:参数1 参数2 参数3 参数4, 顺时针
```
	border-radius:50px 100px 150px 100px;
```
	
	列表属性：
		list-style-type 列表项符号：none无 disc实心圆 circle空心圆 square
		list-style-image  设置图片作为列表项的符号: url(图片路径)
		list-style-position 设置项目符号在列表项的位置: inside outside(默认)
```
<style>
	ul {
		/* list-style-type:none; */
		list-style-image:url(images/arrow.png);
		list-style-position:inside;
	}
	li {
		border:2px red solid;
	}
</style>
```
		通过复合属性设置列表项：
```
	list-style:circle inside url(images/arrow.png);
```

	背景属性：1背景颜色 2背景图片 3背景图片的重复方式
		background-color 设置背景颜色
```
	background-color:blue;
```
		background-image 设置背景图片: url(图片地址)
				如果同时存在背景图片和背景颜色，优先显示背景图片
		background-repeat 设置背景图片的平铺方式：
			repeat(默认)全部平铺 ，默认repeat, no-repeat不平铺,repeat-x横向平铺 repeat-y纵向平铺
```
	/* background-color:blue; */
	background-image:url(images/shrimp_2.jpg);
	background-repeat:repeat-y;
``
		
	背景图片的定位：1 background-position属性  2 CSS Sprites
			background-position:关键字 百分比 像素值
			关键字：水平方向left center right, 垂直方向top center bottom
			
			百分比：水平方向：常用0% 50% 100%表示左中右，垂直方向：常用0% 50% 100%表示上中下
			
			像素值：背景图片左顶点相对于上级元素左顶点的偏移量。
				当为正数时，水平向右，垂直向下。
				当为负数时，水平向左，垂直向上。
```
	#content {
		border:2px solid red;
		width:900px;
		height:700px;
		/* background-color:blue; */
		background-image:url(images/shrimp_2.jpg);
		background-repeat:no-repeat;
		/* background-position:left top; */
		/* background-position:100% 0%; */
		background-position:-100px -50px;
	}
```
	CSS Sprites（雪碧图，精灵图）
```
	#second {
		background-position:0px -26px;
	}
	#third {
		background-position:0px -52px;
	}
```
	背景的渐变：1线性渐变 2径向渐变
	
	1线性渐变 
		background:linear-gradient(参数1（角度或者方向），参数2（颜色），参数3（颜色）.。。)
```
		background:linear-gradient(to right top,red,pink,black);
```
	透明度渐变
	rgb(red,green,blue)设置颜色
	rgba(red,green,blue,alpha(透明度参数))
```
	background:linear-gradient(to right,rgba(255, 255, 255, 0),rgba(255, 255, 255, 0.6)),url(images/aa.jpg);
```
	重复线性渐变 
		background: repeating-linear-gradient(参数1（角度或者方向），参数2（颜色），参数3（颜色）.。。)
```
	background:repeating-linear-gradient(45deg,red,blue 30px);
```
	
	2径向渐变
		background:radial-gradient(参数1（形状或者圆心位置），参数2（颜色），参数3（颜色）。。)
```
	background:radial-gradient(circle,black,white 20px)
```
	重复径向渐变
```
	background:repeating-radial-gradient(ellipse,black,white 20px)
```
	阴影属性：1文字阴影 2盒子阴影
	1文字阴影 
		text-shadow:h-shadow水平距离（必须） v-shadow垂直距离（必须） blur模糊半径 color阴影颜色
```
	text-shadow:10px 10px 5px blue;
```
	2盒子阴影
		box-shadow:h-shadow水平距离（必须） v-shadow垂直距离（必须） blur模糊半径 spread阴影大小 color阴影颜色
```
	box-shadow:10px 10px 15px 5px blue;
```

	盒子模型：1原理 2标准文档流 3浮动 4定位
		盒子模型原理
			1概述:每个HTML元素都可以看作一个盒子。包含内容 填充 边框 边距(边界)
				（填充 边框 边距包含top上、bottom下、left左、right右四部分)
			 
			2盒子大小
			  盒子实际大小
					盒子实际宽度：左边框+左填充+内容宽度+右填充+右边框（不算边距）
					盒子实际高度：上边框+上填充+内容高度+下填充+下边框（不算边距）
					
			  盒子占据空间大小
					盒子占据宽度：盒子实际宽+左边距+右边距
					盒子占据高度：盒子实际高+上边距+上边距
```
	<div id="content">
		内容宽度：300px  <br />
		内容高度：500px <br />
		
		边框宽度：15px <br />
		
		左右填充：40px <br />
		上下填充：20px <br />
		
		左右边距：40px <br />
		上下边距：30px <br /><br />
		
		盒子实际宽度：15px+40px+300px+40px+15px=410px <br /><br />
		盒子实际高度：15px+15px+20px+20px+500px=570px <br /><br />
		
		盒子占据宽度：410px+40px+40px=490px <br /><br />
		
		盒子占据高度：570px+30px+30px=630px <br /><br />
		
	</div>
```
		3盒子之间的关系
		
	
	
	
	
	
	 2标准文档流 3浮动 4定位



盒子模型：1原理 2标准文档流 3浮动 4定位
		盒子模型原理
			1概述:每个HTML元素都可以看作一个盒子。包含内容 填充 边框 边距(边界)
				（填充 边框 边距包含top上、bottom下、left左、right右四部分)
			 
			2盒子大小
			  盒子实际大小
					盒子实际宽度：左边框+左填充+内容宽度+右填充+右边框 （不算边距）
					盒子实际高度：上边框+上填充+内容高度+下填充+下边框 （不算边距）
					
			  盒子占据空间大小: 盒子实际大小+边距
					盒子占据宽度：盒子实际宽+左边距+右边距
					盒子占据高度：盒子实际高+上边距+下边距
```
	<div id="content">
		内容宽度：300px  <br />
		内容高度：500px <br />
		
		边框宽度：15px <br />
		
		左右填充：40px <br />
		上下填充：20px <br />
		
		左右边距：40px <br />
		上下边距：30px <br /><br />
		
		盒子实际宽度：15px+40px+300px+40px+15px=410px <br /><br />
		盒子实际高度：15px+15px+20px+20px+500px=570px <br /><br />
		
		盒子占据宽度：410px+40px+40px=490px <br /><br />
		
		盒子占据高度：570px+30px+30px=630px <br /><br />
		
	</div>
```
		3盒子之间的关系
			垂直盒子：取margin-bottom和margin-top的较大值
			水平盒子：取margin-right和margin-left之和
			重叠盒子：margin设置为负数，但是border、padding只能取正数
	
	2标准文档流（普通流、标准流）
		1概述：从左到右，自上而下
			块元素：标题 段落 水平线  列表 层（<div>）表格 表单
			行元素：图像 范围（<span>）换行 超链接
			块元素和行元素的区别：
				1排列方式不同
					块元素从上而下排列。
					行元素从左到右排列。
				2内嵌元素不同
					块元素可以包含块元素和行元素。
					但是行元素只能包含文本或者行元素。
				3属性设置不同
					块元素可以设置width和height属性
					行元素不能设置width和height，也不能设置上下边距，上下填，但是可以设置line-height
					
		2display属性: display:none|block;
			控制是否存在。 隐藏该元素，不占屏幕空间。
```
	display:none;
```
		3visibility属性:visibility:hidden | visible;
			控制是否显示。隐藏但是占屏幕空间。
```
	visibility:hidden;			
```  
	  
	  3浮动 
		1 float属性
			float:none | left | right
				left 向上级元素左边浮动
				right 向上级元素右边浮动
				none 默认，不浮动
				
		2 清除浮动
			浮动副作用
				背景不能撑开
				边框不能撑开
				margin padding不能正常设置
				
			1 对父级设置宽高属性
			
			2 clear:both清除浮动
				在父级<div>结束前加<div class="clear"> </div> 
			
			3 在父级定义overflow:hidden
```
overflow:hidden;
```
	  
	4定位
		1 静态定位
			按照标准文档流，从左到右，自上而下。
```
	position: static;
```
			
		2 相对定位
			从原来的位置移动到一个相对位置。占据原来的空间。
			参考点：左顶点
```
	position: relative;
	top:100px;
	left:100px;
```
		3 固定定位
			相当于浏览器窗口定位。
```
	position:fixed;
	top:200px;
	left:200px;
```
		4 绝对定位
			脱离标准文档流。不占据空间。可以将指定标签放到任意绝对坐标位置。
```
	position:absolute;
	top:200px;
	left:200px;
```	
		5 z-index属性，设置元素堆叠顺序
			必须先设置定位。
			z-index:数字 数字越大，越靠前


文本居中：
	水平居中 

	垂直居中
```
	line-height:50px;
```

div居中：
	先设置宽度width属性
```
	margin: 0px auto;
```

浏览器去白边：
```
	* {
		margin:0px;
		padding:0px;
	}
```

设置背景图片的尺寸：background-size属性
	background-size: 参数1 参数2;
	第一个值设置宽度，第二个值设置高度（单位px或者百分比）
```
	background-size: 100% 100%;
```